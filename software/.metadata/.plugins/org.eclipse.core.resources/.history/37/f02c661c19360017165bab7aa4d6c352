/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */


#include <sys/alt_irq.h>
#include "sys/alt_stdio.h"
#include "sys/alt_alarm.h"
#include "sys/alt_llist.h"
#include  <altera_avalon_uart.h>
#include  "altera_avalon_uart_regs.h"
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include <stdlib.h>
#include <string.h>
//#include <math.h>
//#include <float.h>
//#include "alt_llist.h"
//#include "alt_types.h"
#include <stdio.h>

#include "stand.h"
#include "unistd.h"
#include "utils.h"


TMotorData mst[motorCount];

#define recvBufLen 100
alt_u8 inputStrInd=0;
char inputStr[recvBufLen];
alt_u32 getPos(alt_u8);




void sendUartData()
{


}
void simpleReceiver1(int context);


int main()
{ 
	 char* msg1 = "Detected the character 't'.\n";
	 char* msg2 = "hello\n";


	 int context = 0;
	 unsigned char rxchar;
	 alt_irq_register(UART_0_IRQ, NULL, simpleReceiver1);

	 //IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE,0);
	 IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
	 //alt_irq_enable(UART_0_IRQ);
	 //alt_irq_enable_all(context);
	//nr_installuserisr(na_uart1_irq, simpleReceiver1, context); // install UART ISR (receiver)
	//na_uart1->np_uartcontrol = np_uartcontrol_irrdy_mask; // enable rrdy interrupt

	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, 0x00);
	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, 0xff);
	//printf("start");
	alt_printf("\n\n\n\n---  start --- \r\n");

////	alt_sysclk_init(1000);
////	alt_alarm_start();
//	if (alt_alarm_start (&alarm,
//	alt_ticks_per_second(),
//	my_alarm_callback,
//	NULL) < 0)
//	{
//		printf ("No system clock available\n");
//	}



//	IOWR(A_16550_UART_0_BASE, 3, (1<<7)|(1<<2)|(0x3));  //0xc 3 lcr
//	IOWR(A_16550_UART_0_BASE, 0, 0);  //0xc 0 dll
//	IOWR(A_16550_UART_0_BASE, 1, 0x1b);  //0xc 1 dlh
//	IOWR(A_16550_UART_0_BASE, 3, (1<<2)|(0x3));  //0xc 3 lcr
//
//	usleep(100);
//	 IOWR(A_16550_UART_0_BASE, 0, 'c');
//	 IOWR(A_16550_UART_0_BASE, 0, 'b');
//	 IOWR(A_16550_UART_0_BASE, 0, 'a');
//
//     IOWR(A_16550_UART_0_BASE, 2, 0x3);

	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
	float pi_64 = 3.145/64;

	int vZadIPS = 80000;
	int i, j=-31, itCnt=0;

	alt_u32 lastTickVal = 0;
	alt_u32 lastMtcVal = 0;
	int divVal = 0x4e2;
	int divInc = -5;
	int ledNum = 0;

	for(i=0; i<motorCount; i++){
		mst[i].speedZadIPS = 0;
		mst[i].state = idle;
		mst[i].posZadI = 0;
		positionReset(i);
	}


	TMotorData *pMd;
	while(1){

		int mi =0;
		for(mi=0; mi<motorCount; mi++){
			pMd = &(mst[mi]);

			switch(pMd->state){
				case idle:
					motorDisable(mi);

					alt_32 deltaPos = pMd->posZadI - getPos(mi);
					if(abs(deltaPos) > 200){
						pMd->state = speedConst;
						if(deltaPos > 0){
							pMd->dir = DIR_UP;
							alt_printf("state idle -> speedConst DIR_UP\r\n");
						}
						else{
							pMd->dir = DIR_DOWN;
							alt_printf("state idle -> speedConst DIR_DOWN\r\n");
						}
					}
					break;
				case speedUp: break;

				case speedConst:
					if((pMd->posZadI - getPos(mi)) < 100){
						pMd->state = idle;
						alt_printf("state speedConst -> idle div\r\n");
					}
					alt_u32 div = SYS_CLOCK/pMd->speedZadIPS;

					setDiv(mi, MOT_ENA, DIR_UP, div);
					break;

				case speedDown:

					break;
			}

		}
		if(alt_nticks() - lastTickVal > 1000){
			lastTickVal = alt_nticks() ;
			alt_printf("iteration %x %x %x %x\r\n", alt_nticks(), itCnt, getPos(0), RxHead);
			itCnt = 0;

			IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, 1<<ledNum);
			if(ledNum++ >7)
				ledNum = 0;

		}
//		if(alt_nticks() - lastMtcVal > 50){
//			lastMtcVal = alt_nticks() ;
//
//
//			//IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, ((1<<21)|(divVal)));
//			IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, ((1<<21)|(divVal)));
//			divVal+=divInc;
//			if(divVal <= 0xB2){
//				divInc = 5;
//			}
//			if(divVal >= 0x4e2){
//				divInc = -5;
//			}
//
//		}
		itCnt++;



		while(isDataAvailable()){
			alt_32 prompt = 0;
			prompt = _getchar();
			inputStr[inputStrInd++] = prompt;
			if ((prompt == '\n') || (inputStrInd == recvBufLen )){
				inputStr[inputStrInd] = 0;
				alt_printf("string recvd %s % ", inputStr);
				inputStrInd = 0;
				alt_8 motNum = -1;
				alt_u16 pos = 0;		//procents*10
				alt_u16 velocity = 0; //mm per sec
				if(inputStr[0] == 'S'){
					motNum = atoi(&(inputStr[1]));
					if(!((motNum>=0) && (motNum<10))){
						motNum = -1;
					}
					alt_printf("mn %x \r\n", motNum);
				}
				char *p = strchr(inputStr, 'p');
				if(p != NULL){
					p++;
					pos = atoi(p);
					if((pos>=0)&& (pos<=1000) && (motNum!=-1)){
						mst[motNum].posZadI=((pos*maxHeightImp)/1000);
						alt_printf("pos %x %x \r\n", pos, mst[motNum].posZadI );
					}
				}
				p = strchr(inputStr, 'v');
				if(p != NULL){
					p++;
					velocity = atoi(p);
					if((velocity>=0)&& (velocity<=4000) && (motNum!=-1)){
						mst[motNum].speedZadIPS = ((velocity*pulsePerRot*10)/100)/mmPerRot;
						alt_printf("vel %x %x div=%x\r\n", velocity, mst[motNum].speedZadIPS,  SYS_CLOCK/mst[motNum].speedZadIPS);
					}
				}
				alt_printf("\r\n", inputStr);
			}
		}


	}

  while (1);

  return 0;
}



// pass an int to make it compatible with nr_installuserisr routine
// contents of third argument ("context") in nr_installuserisr is passed to ISR
void simpleReceiver1(int context)
{

	while((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) != 0){

		RxBuf[RxHead]  = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
		IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE,0);
		if ((++RxHead) > (RXBUFSIZE-1)){
			RxHead = 0;
		}
	}
}


/*
32768
8329
3726
2104
1351
942
694
533
423
344
286
241
207
179
157
139
124
111
101
92
84
77
71
66
61
57
54
51
48
45
43
41
39
37
36
34
33
32
30
29
29
28
27
26
26
25
24
24
23
23
23
22
22
22
21
21
21
21
21
21
20
20
20

*/
