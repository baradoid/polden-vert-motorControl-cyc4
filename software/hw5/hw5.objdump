
hw5.elf:     file format elf32-littlenios2
hw5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010140

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags r-x
    LOAD off    0x00002750 vaddr 0x00011750 paddr 0x00011854 align 2**12
         filesz 0x00000104 memsz 0x00000104 flags rw-
    LOAD off    0x00002958 vaddr 0x00011958 paddr 0x00011958 align 2**12
         filesz 0x00000000 memsz 0x000002d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001294  00010140  00010140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  000113d4  000113d4  000023d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000104  00011750  00011854  00002750  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002d4  00011958  00011958  00002958  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000002f8  00000000  00000000  00002880  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000004c1  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000305b  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000135f  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003489  00000000  00000000  000073f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003c4  00000000  00000000  0000a87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f85  00000000  00000000  0000ac40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000bb5  00000000  00000000  0000bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000c77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  0000c790  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000dd90  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000dd93  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000dd96  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000dd97  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0000dd98  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  0000dd9e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  0000dda4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0000ddaa  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000ddae  2**0
                  CONTENTS, READONLY
 26 .jdi          000042df  00000000  00000000  0000ddde  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007071a  00000000  00000000  000120bd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010140 l    d  .text	00000000 .text
000113d4 l    d  .rodata	00000000 .rodata
00011750 l    d  .rwdata	00000000 .rwdata
00011958 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000109e4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 ctype_.c
000115cd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 impure.c
00011750 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00010f40 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000112f4 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00010fcc g     F .text	0000002c alt_main
00010658 g     F .text	000000d0 motorDisable
00011b2c g     O .bss	00000100 alt_irq
00011854 g       *ABS*	00000000 __flash_rwdata_start
00011848 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001197c g     O .bss	00000004 errno
00010618 g     F .text	00000010 isDataAvailable
0001196c g     O .bss	00000004 alt_argv
00019830 g       *ABS*	00000000 _gp
00011958 g     O .bss	00000001 inputStrInd
00011980 g     O .bss	000000c8 mst
00010b20 g     F .text	00000008 __udivsi3
00011838 g     O .rwdata	00000004 _global_impure_ptr
00011c2c g       *ABS*	00000000 __bss_end
00010ed4 g     F .text	0000006c alt_iic_isr_register
000111c0 g     F .text	000000ac alt_tick
00011830 g     O .rwdata	00000004 __ctype_ptr
00010e38 g     F .text	00000018 alt_ic_irq_enabled
0001118c g     F .text	00000034 alt_alarm_stop
00010e14 g     F .text	00000024 strtol
00011964 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	00000054 alt_irq_handler
000113c4 g     F .text	00000004 alt_dcache_flush_all
00011854 g       *ABS*	00000000 __ram_rwdata_end
00011750 g       *ABS*	00000000 __ram_rodata_end
00010b28 g     F .text	00000008 __umodsi3
00011c2c g       *ABS*	00000000 end
00010b68 g     F .text	0000000c _atoi_r
00011330 g     F .text	00000094 altera_avalon_uart_write
0001c000 g       *ABS*	00000000 __alt_stack_pointer
000112a4 g     F .text	00000050 alt_avalon_timer_sc_init
00010ff8 g     F .text	00000144 alt_printf
00010740 g     F .text	000000d8 motorSetDir
00010140 g     F .text	0000003c _start
00011974 g     O .bss	00000004 _alt_tick_rate
00011978 g     O .bss	00000004 _alt_nticks
0001126c g     F .text	00000018 alt_sys_init
00010b30 g     F .text	00000038 __mulsi3
00011750 g       *ABS*	00000000 __ram_rwdata_start
000113d4 g       *ABS*	00000000 __ram_rodata_start
000108e8 g     F .text	00000024 setDiv
00011c2c g       *ABS*	00000000 __alt_stack_base
00010628 g     F .text	00000030 _getchar
00010728 g     F .text	00000018 motorPositionReset
00011958 g       *ABS*	00000000 __bss_start
000101dc g     F .text	0000043c main
00011970 g     O .bss	00000004 alt_envp
0001184c g     O .rwdata	00000004 uart_0
00010bc4 g     F .text	00000250 _strtol_r
00011850 g     O .rwdata	00000004 alt_errno
00010a60 g     F .text	00000060 __divsi3
000113d4 g       *ABS*	00000000 __flash_rodata_start
00011284 g     F .text	00000020 alt_irq_init
00011834 g     O .rwdata	00000004 _impure_ptr
00011968 g     O .bss	00000004 alt_argc
0001195c g     O .bss	00000004 RxHead
00011aac g     O .bss	00000080 RxBuf
00011960 g     O .bss	00000004 RxTail
00010020 g       .exceptions	00000000 alt_irq_entry
0001017c g     F .text	00000004 sendUartData
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00010ed0 g     F .text	00000004 alt_ic_isr_register
00010818 g     F .text	000000d0 wr
00011854 g       *ABS*	00000000 _edata
00011c2c g       *ABS*	00000000 _end
00010140 g       *ABS*	00000000 __ram_exceptions_end
00010e90 g     F .text	00000040 alt_ic_irq_disable
000113cc g     F .text	00000008 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
00010ac0 g     F .text	00000060 __modsi3
0001c000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010b74 g     F .text	0000000c atoi
00010180 g     F .text	0000005c simpleReceiver1
000114cc g     O .rodata	00000101 _ctype_
00011a48 g     O .bss	00000064 inputStr
0001000c g       .entry	00000000 _exit
0001113c g     F .text	00000050 alt_putchar
000113c8 g     F .text	00000004 alt_icache_flush_all
00010b80 g     F .text	00000044 strchr
0001090c g     F .text	000000d8 getPos
0001183c g     O .rwdata	00000004 alt_priority_mask
00010e50 g     F .text	00000040 alt_ic_irq_enable
00011840 g     O .rwdata	00000008 alt_alarm_list
00010f60 g     F .text	0000006c alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08405014 	ori	at,at,320
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	deffff04 	addi	sp,sp,-4
   100f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100f4:	0009313a 	rdctl	r4,ipending
   100f8:	00c00044 	movi	r3,1
   100fc:	01400074 	movhi	r5,1
   10100:	2946cb04 	addi	r5,r5,6956
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1010c:	10000726 	beq	r2,zero,1012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10110:	29000117 	ldw	r4,4(r5)
   10114:	28800017 	ldw	r2,0(r5)
   10118:	103ee83a 	callr	r2
   1011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   10120:	10000426 	beq	r2,zero,10134 <alt_irq_handler+0x48>
   10124:	1009883a 	mov	r4,r2
   10128:	003ff306 	br	100f8 <alt_irq_handler+0xc>
   1012c:	29400204 	addi	r5,r5,8
   10130:	003ff406 	br	10104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10134:	dfc00017 	ldw	ra,0(sp)
   10138:	dec00104 	addi	sp,sp,4
   1013c:	f800283a 	ret

Disassembly of section .text:

00010140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10140:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10144:	def00014 	ori	sp,sp,49152

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1014c:	d6a60c14 	ori	gp,gp,38960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10150:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10154:	10865614 	ori	r2,r2,6488

    movhi r3, %hi(__bss_end)
   10158:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1015c:	18c70b14 	ori	r3,r3,7212

    beq r2, r3, 1f
   10160:	10c00326 	beq	r2,r3,10170 <_start+0x30>

0:
    stw zero, (r2)
   10164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1016c:	10fffd36 	bltu	r2,r3,10164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10170:	0010f600 	call	10f60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10174:	0010fcc0 	call	10fcc <alt_main>

00010178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10178:	003fff06 	br	10178 <alt_after_alt_main>

0001017c <sendUartData>:
   1017c:	f800283a 	ret

00010180 <simpleReceiver1>:
   10180:	018000b4 	movhi	r6,2
   10184:	31840a04 	addi	r6,r6,4136
   10188:	024000b4 	movhi	r9,2
   1018c:	4a440804 	addi	r9,r9,4128
   10190:	02000074 	movhi	r8,1
   10194:	4206ab04 	addi	r8,r8,6828
   10198:	01c01fc4 	movi	r7,127
   1019c:	00000906 	br	101c4 <simpleReceiver1+0x44>
   101a0:	28800017 	ldw	r2,0(r5)
   101a4:	49000037 	ldwio	r4,0(r9)
   101a8:	1207883a 	add	r3,r2,r8
   101ac:	19000005 	stb	r4,0(r3)
   101b0:	30000035 	stwio	zero,0(r6)
   101b4:	10800044 	addi	r2,r2,1
   101b8:	28800015 	stw	r2,0(r5)
   101bc:	3880012e 	bgeu	r7,r2,101c4 <simpleReceiver1+0x44>
   101c0:	28000015 	stw	zero,0(r5)
   101c4:	30800037 	ldwio	r2,0(r6)
   101c8:	01400074 	movhi	r5,1
   101cc:	29465704 	addi	r5,r5,6492
   101d0:	1080200c 	andi	r2,r2,128
   101d4:	103ff21e 	bne	r2,zero,101a0 <simpleReceiver1+0x20>
   101d8:	f800283a 	ret

000101dc <main>:
   101dc:	defff604 	addi	sp,sp,-40
   101e0:	0009883a 	mov	r4,zero
   101e4:	01400044 	movi	r5,1
   101e8:	01800074 	movhi	r6,1
   101ec:	31806004 	addi	r6,r6,384
   101f0:	000f883a 	mov	r7,zero
   101f4:	dc000215 	stw	r16,8(sp)
   101f8:	dfc00915 	stw	ra,36(sp)
   101fc:	dd800815 	stw	r22,32(sp)
   10200:	dd400715 	stw	r21,28(sp)
   10204:	dd000615 	stw	r20,24(sp)
   10208:	dcc00515 	stw	r19,20(sp)
   1020c:	dc800415 	stw	r18,16(sp)
   10210:	dc400315 	stw	r17,12(sp)
   10214:	d8000015 	stw	zero,0(sp)
   10218:	0010ed00 	call	10ed0 <alt_ic_isr_register>
   1021c:	1021883a 	mov	r16,r2
   10220:	00c02004 	movi	r3,128
   10224:	008000b4 	movhi	r2,2
   10228:	10840b04 	addi	r2,r2,4140
   1022c:	10c00035 	stwio	r3,0(r2)
   10230:	01000074 	movhi	r4,1
   10234:	2104f504 	addi	r4,r4,5076
   10238:	0010ff80 	call	10ff8 <alt_printf>
   1023c:	80000326 	beq	r16,zero,1024c <main+0x70>
   10240:	01000074 	movhi	r4,1
   10244:	2104fb04 	addi	r4,r4,5100
   10248:	0010ff80 	call	10ff8 <alt_printf>
   1024c:	0023883a 	mov	r17,zero
   10250:	04000074 	movhi	r16,1
   10254:	84066004 	addi	r16,r16,6528
   10258:	8809883a 	mov	r4,r17
   1025c:	80000015 	stw	zero,0(r16)
   10260:	80000415 	stw	zero,16(r16)
   10264:	80000215 	stw	zero,8(r16)
   10268:	00107280 	call	10728 <motorPositionReset>
   1026c:	8c400044 	addi	r17,r17,1
   10270:	00800284 	movi	r2,10
   10274:	84000504 	addi	r16,r16,20
   10278:	88bff71e 	bne	r17,r2,10258 <main+0x7c>
   1027c:	002b883a 	mov	r21,zero
   10280:	002d883a 	mov	r22,zero
   10284:	0029883a 	mov	r20,zero
   10288:	0027883a 	mov	r19,zero
   1028c:	04800074 	movhi	r18,1
   10290:	94866404 	addi	r18,r18,6544
   10294:	94400017 	ldw	r17,0(r18)
   10298:	00800044 	movi	r2,1
   1029c:	88800726 	beq	r17,r2,102bc <main+0xe0>
   102a0:	88800336 	bltu	r17,r2,102b0 <main+0xd4>
   102a4:	008000c4 	movi	r2,3
   102a8:	88802d1e 	bne	r17,r2,10360 <main+0x184>
   102ac:	00001806 	br	10310 <main+0x134>
   102b0:	9809883a 	mov	r4,r19
   102b4:	00106580 	call	10658 <motorDisable>
   102b8:	00002906 	br	10360 <main+0x184>
   102bc:	943ffe17 	ldw	r16,-8(r18)
   102c0:	9809883a 	mov	r4,r19
   102c4:	001090c0 	call	1090c <getPos>
   102c8:	80a1c83a 	sub	r16,r16,r2
   102cc:	8007883a 	mov	r3,r16
   102d0:	8000010e 	bge	r16,zero,102d8 <main+0xfc>
   102d4:	0407c83a 	sub	r3,zero,r16
   102d8:	00803204 	movi	r2,200
   102dc:	10c0200e 	bge	r2,r3,10360 <main+0x184>
   102e0:	008000c4 	movi	r2,3
   102e4:	90800015 	stw	r2,0(r18)
   102e8:	0400040e 	bge	zero,r16,102fc <main+0x120>
   102ec:	01000074 	movhi	r4,1
   102f0:	21050104 	addi	r4,r4,5124
   102f4:	947fff05 	stb	r17,-4(r18)
   102f8:	00000306 	br	10308 <main+0x12c>
   102fc:	01000074 	movhi	r4,1
   10300:	21050a04 	addi	r4,r4,5160
   10304:	903fff05 	stb	zero,-4(r18)
   10308:	0010ff80 	call	10ff8 <alt_printf>
   1030c:	00001406 	br	10360 <main+0x184>
   10310:	943ffe17 	ldw	r16,-8(r18)
   10314:	9809883a 	mov	r4,r19
   10318:	001090c0 	call	1090c <getPos>
   1031c:	80a1c83a 	sub	r16,r16,r2
   10320:	008018c4 	movi	r2,99
   10324:	14000436 	bltu	r2,r16,10338 <main+0x15c>
   10328:	01000074 	movhi	r4,1
   1032c:	21051304 	addi	r4,r4,5196
   10330:	90000015 	stw	zero,0(r18)
   10334:	0010ff80 	call	10ff8 <alt_printf>
   10338:	917ffc17 	ldw	r5,-16(r18)
   1033c:	943fff03 	ldbu	r16,-4(r18)
   10340:	0100bef4 	movhi	r4,763
   10344:	213c2004 	addi	r4,r4,-3968
   10348:	0010b200 	call	10b20 <__udivsi3>
   1034c:	800d883a 	mov	r6,r16
   10350:	9809883a 	mov	r4,r19
   10354:	100f883a 	mov	r7,r2
   10358:	01400044 	movi	r5,1
   1035c:	00108e80 	call	108e8 <setDiv>
   10360:	9cc00044 	addi	r19,r19,1
   10364:	00800284 	movi	r2,10
   10368:	94800504 	addi	r18,r18,20
   1036c:	98bfc91e 	bne	r19,r2,10294 <main+0xb8>
   10370:	01400074 	movhi	r5,1
   10374:	29465e04 	addi	r5,r5,6520
   10378:	28800017 	ldw	r2,0(r5)
   1037c:	00c0fa04 	movi	r3,1000
   10380:	1585c83a 	sub	r2,r2,r22
   10384:	18809f2e 	bgeu	r3,r2,10604 <main+0x428>
   10388:	0009883a 	mov	r4,zero
   1038c:	2d800017 	ldw	r22,0(r5)
   10390:	001090c0 	call	1090c <getPos>
   10394:	10000216 	blt	r2,zero,103a0 <main+0x1c4>
   10398:	04400ac4 	movi	r17,43
   1039c:	00000106 	br	103a4 <main+0x1c8>
   103a0:	04400b44 	movi	r17,45
   103a4:	0009883a 	mov	r4,zero
   103a8:	00800074 	movhi	r2,1
   103ac:	10865e04 	addi	r2,r2,6520
   103b0:	14000017 	ldw	r16,0(r2)
   103b4:	001090c0 	call	1090c <getPos>
   103b8:	1009883a 	mov	r4,r2
   103bc:	01406404 	movi	r5,400
   103c0:	0010a600 	call	10a60 <__divsi3>
   103c4:	00c00074 	movhi	r3,1
   103c8:	18c65704 	addi	r3,r3,6492
   103cc:	18c00017 	ldw	r3,0(r3)
   103d0:	89c03fcc 	andi	r7,r17,255
   103d4:	39c0201c 	xori	r7,r7,128
   103d8:	39ffe004 	addi	r7,r7,-128
   103dc:	800b883a 	mov	r5,r16
   103e0:	a80d883a 	mov	r6,r21
   103e4:	01000074 	movhi	r4,1
   103e8:	21051b04 	addi	r4,r4,5228
   103ec:	d8800015 	stw	r2,0(sp)
   103f0:	d8c00115 	stw	r3,4(sp)
   103f4:	0010ff80 	call	10ff8 <alt_printf>
   103f8:	00800044 	movi	r2,1
   103fc:	1504983a 	sll	r2,r2,r20
   10400:	00c000b4 	movhi	r3,2
   10404:	18c41004 	addi	r3,r3,4160
   10408:	18800035 	stwio	r2,0(r3)
   1040c:	008001c4 	movi	r2,7
   10410:	1500030e 	bge	r2,r20,10420 <main+0x244>
   10414:	002b883a 	mov	r21,zero
   10418:	0029883a 	mov	r20,zero
   1041c:	00007906 	br	10604 <main+0x428>
   10420:	a5000044 	addi	r20,r20,1
   10424:	002b883a 	mov	r21,zero
   10428:	00007606 	br	10604 <main+0x428>
   1042c:	00106280 	call	10628 <_getchar>
   10430:	d1204a03 	ldbu	r4,-32472(gp)
   10434:	04000074 	movhi	r16,1
   10438:	84069204 	addi	r16,r16,6728
   1043c:	10803fcc 	andi	r2,r2,255
   10440:	20c03fcc 	andi	r3,r4,255
   10444:	1c07883a 	add	r3,r3,r16
   10448:	21000044 	addi	r4,r4,1
   1044c:	18800005 	stb	r2,0(r3)
   10450:	00c00284 	movi	r3,10
   10454:	d1204a05 	stb	r4,-32472(gp)
   10458:	10c00326 	beq	r2,r3,10468 <main+0x28c>
   1045c:	20c03fcc 	andi	r3,r4,255
   10460:	00801904 	movi	r2,100
   10464:	1880671e 	bne	r3,r2,10604 <main+0x428>
   10468:	20803fcc 	andi	r2,r4,255
   1046c:	1405883a 	add	r2,r2,r16
   10470:	10000005 	stb	zero,0(r2)
   10474:	01000074 	movhi	r4,1
   10478:	21052204 	addi	r4,r4,5256
   1047c:	800b883a 	mov	r5,r16
   10480:	0010ff80 	call	10ff8 <alt_printf>
   10484:	80c00007 	ldb	r3,0(r16)
   10488:	008014c4 	movi	r2,83
   1048c:	d0204a05 	stb	zero,-32472(gp)
   10490:	18800226 	beq	r3,r2,1049c <main+0x2c0>
   10494:	04bfffc4 	movi	r18,-1
   10498:	00000d06 	br	104d0 <main+0x2f4>
   1049c:	81000044 	addi	r4,r16,1
   104a0:	0010b740 	call	10b74 <atoi>
   104a4:	1025883a 	mov	r18,r2
   104a8:	10c03fcc 	andi	r3,r2,255
   104ac:	00800244 	movi	r2,9
   104b0:	10c0012e 	bgeu	r2,r3,104b8 <main+0x2dc>
   104b4:	04bfffc4 	movi	r18,-1
   104b8:	91403fcc 	andi	r5,r18,255
   104bc:	2940201c 	xori	r5,r5,128
   104c0:	01000074 	movhi	r4,1
   104c4:	21052704 	addi	r4,r4,5276
   104c8:	297fe004 	addi	r5,r5,-128
   104cc:	0010ff80 	call	10ff8 <alt_printf>
   104d0:	01000074 	movhi	r4,1
   104d4:	21069204 	addi	r4,r4,6728
   104d8:	01401c04 	movi	r5,112
   104dc:	0010b800 	call	10b80 <strchr>
   104e0:	10001c26 	beq	r2,zero,10554 <main+0x378>
   104e4:	11000044 	addi	r4,r2,1
   104e8:	0010b740 	call	10b74 <atoi>
   104ec:	147fffcc 	andi	r17,r2,65535
   104f0:	0080fa04 	movi	r2,1000
   104f4:	14401736 	bltu	r2,r17,10554 <main+0x378>
   104f8:	91003fcc 	andi	r4,r18,255
   104fc:	2100201c 	xori	r4,r4,128
   10500:	213fe004 	addi	r4,r4,-128
   10504:	00bfffc4 	movi	r2,-1
   10508:	20801226 	beq	r4,r2,10554 <main+0x378>
   1050c:	01400504 	movi	r5,20
   10510:	0010b300 	call	10b30 <__mulsi3>
   10514:	00c00074 	movhi	r3,1
   10518:	18c66004 	addi	r3,r3,6528
   1051c:	10e1883a 	add	r16,r2,r3
   10520:	80800217 	ldw	r2,8(r16)
   10524:	88800b26 	beq	r17,r2,10554 <main+0x378>
   10528:	00800044 	movi	r2,1
   1052c:	8809883a 	mov	r4,r17
   10530:	01406404 	movi	r5,400
   10534:	80800415 	stw	r2,16(r16)
   10538:	0010b300 	call	10b30 <__mulsi3>
   1053c:	100d883a 	mov	r6,r2
   10540:	880b883a 	mov	r5,r17
   10544:	01000074 	movhi	r4,1
   10548:	21052a04 	addi	r4,r4,5288
   1054c:	80800215 	stw	r2,8(r16)
   10550:	0010ff80 	call	10ff8 <alt_printf>
   10554:	01000074 	movhi	r4,1
   10558:	21069204 	addi	r4,r4,6728
   1055c:	01401d84 	movi	r5,118
   10560:	0010b800 	call	10b80 <strchr>
   10564:	10002226 	beq	r2,zero,105f0 <main+0x414>
   10568:	11000044 	addi	r4,r2,1
   1056c:	0010b740 	call	10b74 <atoi>
   10570:	10ffe704 	addi	r3,r2,-100
   10574:	1023883a 	mov	r17,r2
   10578:	18ffffcc 	andi	r3,r3,65535
   1057c:	0083cf04 	movi	r2,3900
   10580:	10c01b36 	bltu	r2,r3,105f0 <main+0x414>
   10584:	94803fcc 	andi	r18,r18,255
   10588:	9480201c 	xori	r18,r18,128
   1058c:	94bfe004 	addi	r18,r18,-128
   10590:	00bfffc4 	movi	r2,-1
   10594:	90801626 	beq	r18,r2,105f0 <main+0x414>
   10598:	8c7fffcc 	andi	r17,r17,65535
   1059c:	8809883a 	mov	r4,r17
   105a0:	01400a04 	movi	r5,40
   105a4:	0010b300 	call	10b30 <__mulsi3>
   105a8:	9009883a 	mov	r4,r18
   105ac:	01400504 	movi	r5,20
   105b0:	1021883a 	mov	r16,r2
   105b4:	0010b300 	call	10b30 <__mulsi3>
   105b8:	00c00074 	movhi	r3,1
   105bc:	18c66004 	addi	r3,r3,6528
   105c0:	10c5883a 	add	r2,r2,r3
   105c4:	0100bef4 	movhi	r4,763
   105c8:	213c2004 	addi	r4,r4,-3968
   105cc:	800b883a 	mov	r5,r16
   105d0:	14000015 	stw	r16,0(r2)
   105d4:	0010b200 	call	10b20 <__udivsi3>
   105d8:	800d883a 	mov	r6,r16
   105dc:	880b883a 	mov	r5,r17
   105e0:	100f883a 	mov	r7,r2
   105e4:	01000074 	movhi	r4,1
   105e8:	21052e04 	addi	r4,r4,5304
   105ec:	0010ff80 	call	10ff8 <alt_printf>
   105f0:	01000074 	movhi	r4,1
   105f4:	21051a04 	addi	r4,r4,5224
   105f8:	01400074 	movhi	r5,1
   105fc:	29469204 	addi	r5,r5,6728
   10600:	0010ff80 	call	10ff8 <alt_printf>
   10604:	00106180 	call	10618 <isDataAvailable>
   10608:	10803fcc 	andi	r2,r2,255
   1060c:	103f871e 	bne	r2,zero,1042c <main+0x250>
   10610:	ad400044 	addi	r21,r21,1
   10614:	003f1c06 	br	10288 <main+0xac>

00010618 <isDataAvailable>:
   10618:	d0e04c17 	ldw	r3,-32464(gp)
   1061c:	d0a04b17 	ldw	r2,-32468(gp)
   10620:	1884c03a 	cmpne	r2,r3,r2
   10624:	f800283a 	ret

00010628 <_getchar>:
   10628:	d0a04c17 	ldw	r2,-32464(gp)
   1062c:	00c00074 	movhi	r3,1
   10630:	18c6ab04 	addi	r3,r3,6828
   10634:	10c7883a 	add	r3,r2,r3
   10638:	19000003 	ldbu	r4,0(r3)
   1063c:	10800044 	addi	r2,r2,1
   10640:	00c01fc4 	movi	r3,127
   10644:	d0a04c15 	stw	r2,-32464(gp)
   10648:	1880012e 	bgeu	r3,r2,10650 <_getchar+0x28>
   1064c:	d0204c15 	stw	zero,-32464(gp)
   10650:	20803fcc 	andi	r2,r4,255
   10654:	f800283a 	ret

00010658 <motorDisable>:
   10658:	21003fcc 	andi	r4,r4,255
   1065c:	00800244 	movi	r2,9
   10660:	11003036 	bltu	r2,r4,10724 <motorDisable+0xcc>
   10664:	2105883a 	add	r2,r4,r4
   10668:	1085883a 	add	r2,r2,r2
   1066c:	00c00074 	movhi	r3,1
   10670:	18c1a004 	addi	r3,r3,1664
   10674:	10c5883a 	add	r2,r2,r3
   10678:	10800017 	ldw	r2,0(r2)
   1067c:	1000683a 	jmp	r2
   10680:	000106a8 	cmpgeui	zero,zero,1050
   10684:	000106b4 	movhi	zero,1050
   10688:	000106c0 	call	106c <__alt_mem_onchip_memory2-0xef94>
   1068c:	000106cc 	andi	zero,zero,1051
   10690:	000106d8 	cmpnei	zero,zero,1051
   10694:	000106e4 	muli	zero,zero,1051
   10698:	000106f0 	cmpltui	zero,zero,1051
   1069c:	000106fc 	xorhi	zero,zero,1051
   106a0:	00010708 	cmpgei	zero,zero,1052
   106a4:	00010718 	cmpnei	zero,zero,1052
   106a8:	008000b4 	movhi	r2,2
   106ac:	10843804 	addi	r2,r2,4320
   106b0:	00001706 	br	10710 <motorDisable+0xb8>
   106b4:	008000b4 	movhi	r2,2
   106b8:	10843404 	addi	r2,r2,4304
   106bc:	00001406 	br	10710 <motorDisable+0xb8>
   106c0:	008000b4 	movhi	r2,2
   106c4:	10843004 	addi	r2,r2,4288
   106c8:	00001106 	br	10710 <motorDisable+0xb8>
   106cc:	008000b4 	movhi	r2,2
   106d0:	10842c04 	addi	r2,r2,4272
   106d4:	00000e06 	br	10710 <motorDisable+0xb8>
   106d8:	008000b4 	movhi	r2,2
   106dc:	10842804 	addi	r2,r2,4256
   106e0:	00000b06 	br	10710 <motorDisable+0xb8>
   106e4:	008000b4 	movhi	r2,2
   106e8:	10842404 	addi	r2,r2,4240
   106ec:	00000806 	br	10710 <motorDisable+0xb8>
   106f0:	008000b4 	movhi	r2,2
   106f4:	10842004 	addi	r2,r2,4224
   106f8:	00000506 	br	10710 <motorDisable+0xb8>
   106fc:	008000b4 	movhi	r2,2
   10700:	10841c04 	addi	r2,r2,4208
   10704:	00000206 	br	10710 <motorDisable+0xb8>
   10708:	008000b4 	movhi	r2,2
   1070c:	10841804 	addi	r2,r2,4192
   10710:	10000035 	stwio	zero,0(r2)
   10714:	f800283a 	ret
   10718:	008000b4 	movhi	r2,2
   1071c:	10841404 	addi	r2,r2,4176
   10720:	10000035 	stwio	zero,0(r2)
   10724:	f800283a 	ret

00010728 <motorPositionReset>:
   10728:	00c000b4 	movhi	r3,2
   1072c:	18c43804 	addi	r3,r3,4320
   10730:	00801034 	movhi	r2,64
   10734:	18800035 	stwio	r2,0(r3)
   10738:	18000035 	stwio	zero,0(r3)
   1073c:	f800283a 	ret

00010740 <motorSetDir>:
   10740:	29403fcc 	andi	r5,r5,255
   10744:	21003fcc 	andi	r4,r4,255
   10748:	00800244 	movi	r2,9
   1074c:	280a953a 	slli	r5,r5,20
   10750:	11003036 	bltu	r2,r4,10814 <motorSetDir+0xd4>
   10754:	2105883a 	add	r2,r4,r4
   10758:	1085883a 	add	r2,r2,r2
   1075c:	00c00074 	movhi	r3,1
   10760:	18c1dc04 	addi	r3,r3,1904
   10764:	10c5883a 	add	r2,r2,r3
   10768:	10800017 	ldw	r2,0(r2)
   1076c:	1000683a 	jmp	r2
   10770:	00010798 	cmpnei	zero,zero,1054
   10774:	000107a4 	muli	zero,zero,1054
   10778:	000107b0 	cmpltui	zero,zero,1054
   1077c:	000107bc 	xorhi	zero,zero,1054
   10780:	000107c8 	cmpgei	zero,zero,1055
   10784:	000107d4 	movui	zero,1055
   10788:	000107e0 	cmpeqi	zero,zero,1055
   1078c:	000107ec 	andhi	zero,zero,1055
   10790:	000107f8 	rdprs	zero,zero,1055
   10794:	00010808 	cmpgei	zero,zero,1056
   10798:	008000b4 	movhi	r2,2
   1079c:	10843804 	addi	r2,r2,4320
   107a0:	00001706 	br	10800 <motorSetDir+0xc0>
   107a4:	008000b4 	movhi	r2,2
   107a8:	10843404 	addi	r2,r2,4304
   107ac:	00001406 	br	10800 <motorSetDir+0xc0>
   107b0:	008000b4 	movhi	r2,2
   107b4:	10843004 	addi	r2,r2,4288
   107b8:	00001106 	br	10800 <motorSetDir+0xc0>
   107bc:	008000b4 	movhi	r2,2
   107c0:	10842c04 	addi	r2,r2,4272
   107c4:	00000e06 	br	10800 <motorSetDir+0xc0>
   107c8:	008000b4 	movhi	r2,2
   107cc:	10842804 	addi	r2,r2,4256
   107d0:	00000b06 	br	10800 <motorSetDir+0xc0>
   107d4:	008000b4 	movhi	r2,2
   107d8:	10842404 	addi	r2,r2,4240
   107dc:	00000806 	br	10800 <motorSetDir+0xc0>
   107e0:	008000b4 	movhi	r2,2
   107e4:	10842004 	addi	r2,r2,4224
   107e8:	00000506 	br	10800 <motorSetDir+0xc0>
   107ec:	008000b4 	movhi	r2,2
   107f0:	10841c04 	addi	r2,r2,4208
   107f4:	00000206 	br	10800 <motorSetDir+0xc0>
   107f8:	008000b4 	movhi	r2,2
   107fc:	10841804 	addi	r2,r2,4192
   10800:	11400035 	stwio	r5,0(r2)
   10804:	f800283a 	ret
   10808:	008000b4 	movhi	r2,2
   1080c:	10841404 	addi	r2,r2,4176
   10810:	11400035 	stwio	r5,0(r2)
   10814:	f800283a 	ret

00010818 <wr>:
   10818:	21003fcc 	andi	r4,r4,255
   1081c:	00800244 	movi	r2,9
   10820:	11003036 	bltu	r2,r4,108e4 <wr+0xcc>
   10824:	2105883a 	add	r2,r4,r4
   10828:	1085883a 	add	r2,r2,r2
   1082c:	00c00074 	movhi	r3,1
   10830:	18c21004 	addi	r3,r3,2112
   10834:	10c5883a 	add	r2,r2,r3
   10838:	10800017 	ldw	r2,0(r2)
   1083c:	1000683a 	jmp	r2
   10840:	00010868 	cmpgeui	zero,zero,1057
   10844:	00010874 	movhi	zero,1057
   10848:	00010880 	call	1088 <__alt_mem_onchip_memory2-0xef78>
   1084c:	0001088c 	andi	zero,zero,1058
   10850:	00010898 	cmpnei	zero,zero,1058
   10854:	000108a4 	muli	zero,zero,1058
   10858:	000108b0 	cmpltui	zero,zero,1058
   1085c:	000108bc 	xorhi	zero,zero,1058
   10860:	000108c8 	cmpgei	zero,zero,1059
   10864:	000108d8 	cmpnei	zero,zero,1059
   10868:	008000b4 	movhi	r2,2
   1086c:	10843804 	addi	r2,r2,4320
   10870:	00001706 	br	108d0 <wr+0xb8>
   10874:	008000b4 	movhi	r2,2
   10878:	10843404 	addi	r2,r2,4304
   1087c:	00001406 	br	108d0 <wr+0xb8>
   10880:	008000b4 	movhi	r2,2
   10884:	10843004 	addi	r2,r2,4288
   10888:	00001106 	br	108d0 <wr+0xb8>
   1088c:	008000b4 	movhi	r2,2
   10890:	10842c04 	addi	r2,r2,4272
   10894:	00000e06 	br	108d0 <wr+0xb8>
   10898:	008000b4 	movhi	r2,2
   1089c:	10842804 	addi	r2,r2,4256
   108a0:	00000b06 	br	108d0 <wr+0xb8>
   108a4:	008000b4 	movhi	r2,2
   108a8:	10842404 	addi	r2,r2,4240
   108ac:	00000806 	br	108d0 <wr+0xb8>
   108b0:	008000b4 	movhi	r2,2
   108b4:	10842004 	addi	r2,r2,4224
   108b8:	00000506 	br	108d0 <wr+0xb8>
   108bc:	008000b4 	movhi	r2,2
   108c0:	10841c04 	addi	r2,r2,4208
   108c4:	00000206 	br	108d0 <wr+0xb8>
   108c8:	008000b4 	movhi	r2,2
   108cc:	10841804 	addi	r2,r2,4192
   108d0:	11400035 	stwio	r5,0(r2)
   108d4:	f800283a 	ret
   108d8:	008000b4 	movhi	r2,2
   108dc:	10841404 	addi	r2,r2,4176
   108e0:	11400035 	stwio	r5,0(r2)
   108e4:	f800283a 	ret

000108e8 <setDiv>:
   108e8:	29403fcc 	andi	r5,r5,255
   108ec:	31803fcc 	andi	r6,r6,255
   108f0:	300c953a 	slli	r6,r6,20
   108f4:	280a957a 	slli	r5,r5,21
   108f8:	39c02034 	orhi	r7,r7,128
   108fc:	21003fcc 	andi	r4,r4,255
   10900:	298ab03a 	or	r5,r5,r6
   10904:	29cab03a 	or	r5,r5,r7
   10908:	00108181 	jmpi	10818 <wr>

0001090c <getPos>:
   1090c:	21003fcc 	andi	r4,r4,255
   10910:	00800244 	movi	r2,9
   10914:	11001136 	bltu	r2,r4,1095c <getPos+0x50>
   10918:	2105883a 	add	r2,r4,r4
   1091c:	1085883a 	add	r2,r2,r2
   10920:	00c00074 	movhi	r3,1
   10924:	18c24d04 	addi	r3,r3,2356
   10928:	10c5883a 	add	r2,r2,r3
   1092c:	10800017 	ldw	r2,0(r2)
   10930:	1000683a 	jmp	r2
   10934:	00010964 	muli	zero,zero,1061
   10938:	00010970 	cmpltui	zero,zero,1061
   1093c:	0001097c 	xorhi	zero,zero,1061
   10940:	00010988 	cmpgei	zero,zero,1062
   10944:	00010994 	movui	zero,1062
   10948:	000109a0 	cmpeqi	zero,zero,1062
   1094c:	000109ac 	andhi	zero,zero,1062
   10950:	000109b8 	rdprs	zero,zero,1062
   10954:	000109c4 	movi	zero,1063
   10958:	000109d4 	movui	zero,1063
   1095c:	0005883a 	mov	r2,zero
   10960:	f800283a 	ret
   10964:	008000b4 	movhi	r2,2
   10968:	10843804 	addi	r2,r2,4320
   1096c:	00001706 	br	109cc <getPos+0xc0>
   10970:	008000b4 	movhi	r2,2
   10974:	10843404 	addi	r2,r2,4304
   10978:	00001406 	br	109cc <getPos+0xc0>
   1097c:	008000b4 	movhi	r2,2
   10980:	10843004 	addi	r2,r2,4288
   10984:	00001106 	br	109cc <getPos+0xc0>
   10988:	008000b4 	movhi	r2,2
   1098c:	10842c04 	addi	r2,r2,4272
   10990:	00000e06 	br	109cc <getPos+0xc0>
   10994:	008000b4 	movhi	r2,2
   10998:	10842804 	addi	r2,r2,4256
   1099c:	00000b06 	br	109cc <getPos+0xc0>
   109a0:	008000b4 	movhi	r2,2
   109a4:	10842404 	addi	r2,r2,4240
   109a8:	00000806 	br	109cc <getPos+0xc0>
   109ac:	008000b4 	movhi	r2,2
   109b0:	10842004 	addi	r2,r2,4224
   109b4:	00000506 	br	109cc <getPos+0xc0>
   109b8:	008000b4 	movhi	r2,2
   109bc:	10841c04 	addi	r2,r2,4208
   109c0:	00000206 	br	109cc <getPos+0xc0>
   109c4:	008000b4 	movhi	r2,2
   109c8:	10841804 	addi	r2,r2,4192
   109cc:	10800037 	ldwio	r2,0(r2)
   109d0:	f800283a 	ret
   109d4:	008000b4 	movhi	r2,2
   109d8:	10841404 	addi	r2,r2,4176
   109dc:	10800037 	ldwio	r2,0(r2)
   109e0:	f800283a 	ret

000109e4 <udivmodsi4>:
   109e4:	29001b2e 	bgeu	r5,r4,10a54 <udivmodsi4+0x70>
   109e8:	28001a16 	blt	r5,zero,10a54 <udivmodsi4+0x70>
   109ec:	00800044 	movi	r2,1
   109f0:	0007883a 	mov	r3,zero
   109f4:	01c007c4 	movi	r7,31
   109f8:	00000306 	br	10a08 <udivmodsi4+0x24>
   109fc:	19c01326 	beq	r3,r7,10a4c <udivmodsi4+0x68>
   10a00:	18c00044 	addi	r3,r3,1
   10a04:	28000416 	blt	r5,zero,10a18 <udivmodsi4+0x34>
   10a08:	294b883a 	add	r5,r5,r5
   10a0c:	1085883a 	add	r2,r2,r2
   10a10:	293ffa36 	bltu	r5,r4,109fc <udivmodsi4+0x18>
   10a14:	10000d26 	beq	r2,zero,10a4c <udivmodsi4+0x68>
   10a18:	0007883a 	mov	r3,zero
   10a1c:	21400236 	bltu	r4,r5,10a28 <udivmodsi4+0x44>
   10a20:	2149c83a 	sub	r4,r4,r5
   10a24:	1886b03a 	or	r3,r3,r2
   10a28:	1004d07a 	srli	r2,r2,1
   10a2c:	280ad07a 	srli	r5,r5,1
   10a30:	103ffa1e 	bne	r2,zero,10a1c <udivmodsi4+0x38>
   10a34:	30000226 	beq	r6,zero,10a40 <udivmodsi4+0x5c>
   10a38:	2005883a 	mov	r2,r4
   10a3c:	f800283a 	ret
   10a40:	1809883a 	mov	r4,r3
   10a44:	2005883a 	mov	r2,r4
   10a48:	f800283a 	ret
   10a4c:	0007883a 	mov	r3,zero
   10a50:	003ff806 	br	10a34 <udivmodsi4+0x50>
   10a54:	00800044 	movi	r2,1
   10a58:	0007883a 	mov	r3,zero
   10a5c:	003fef06 	br	10a1c <udivmodsi4+0x38>

00010a60 <__divsi3>:
   10a60:	defffe04 	addi	sp,sp,-8
   10a64:	dc000015 	stw	r16,0(sp)
   10a68:	dfc00115 	stw	ra,4(sp)
   10a6c:	0021883a 	mov	r16,zero
   10a70:	20000c16 	blt	r4,zero,10aa4 <__divsi3+0x44>
   10a74:	000d883a 	mov	r6,zero
   10a78:	28000e16 	blt	r5,zero,10ab4 <__divsi3+0x54>
   10a7c:	00109e40 	call	109e4 <udivmodsi4>
   10a80:	1007883a 	mov	r3,r2
   10a84:	8005003a 	cmpeq	r2,r16,zero
   10a88:	1000011e 	bne	r2,zero,10a90 <__divsi3+0x30>
   10a8c:	00c7c83a 	sub	r3,zero,r3
   10a90:	1805883a 	mov	r2,r3
   10a94:	dfc00117 	ldw	ra,4(sp)
   10a98:	dc000017 	ldw	r16,0(sp)
   10a9c:	dec00204 	addi	sp,sp,8
   10aa0:	f800283a 	ret
   10aa4:	0109c83a 	sub	r4,zero,r4
   10aa8:	04000044 	movi	r16,1
   10aac:	000d883a 	mov	r6,zero
   10ab0:	283ff20e 	bge	r5,zero,10a7c <__divsi3+0x1c>
   10ab4:	014bc83a 	sub	r5,zero,r5
   10ab8:	8021003a 	cmpeq	r16,r16,zero
   10abc:	003fef06 	br	10a7c <__divsi3+0x1c>

00010ac0 <__modsi3>:
   10ac0:	deffff04 	addi	sp,sp,-4
   10ac4:	dfc00015 	stw	ra,0(sp)
   10ac8:	01800044 	movi	r6,1
   10acc:	2807883a 	mov	r3,r5
   10ad0:	20000416 	blt	r4,zero,10ae4 <__modsi3+0x24>
   10ad4:	28000c16 	blt	r5,zero,10b08 <__modsi3+0x48>
   10ad8:	dfc00017 	ldw	ra,0(sp)
   10adc:	dec00104 	addi	sp,sp,4
   10ae0:	00109e41 	jmpi	109e4 <udivmodsi4>
   10ae4:	0109c83a 	sub	r4,zero,r4
   10ae8:	28000b16 	blt	r5,zero,10b18 <__modsi3+0x58>
   10aec:	180b883a 	mov	r5,r3
   10af0:	01800044 	movi	r6,1
   10af4:	00109e40 	call	109e4 <udivmodsi4>
   10af8:	0085c83a 	sub	r2,zero,r2
   10afc:	dfc00017 	ldw	ra,0(sp)
   10b00:	dec00104 	addi	sp,sp,4
   10b04:	f800283a 	ret
   10b08:	014bc83a 	sub	r5,zero,r5
   10b0c:	dfc00017 	ldw	ra,0(sp)
   10b10:	dec00104 	addi	sp,sp,4
   10b14:	00109e41 	jmpi	109e4 <udivmodsi4>
   10b18:	0147c83a 	sub	r3,zero,r5
   10b1c:	003ff306 	br	10aec <__modsi3+0x2c>

00010b20 <__udivsi3>:
   10b20:	000d883a 	mov	r6,zero
   10b24:	00109e41 	jmpi	109e4 <udivmodsi4>

00010b28 <__umodsi3>:
   10b28:	01800044 	movi	r6,1
   10b2c:	00109e41 	jmpi	109e4 <udivmodsi4>

00010b30 <__mulsi3>:
   10b30:	20000a26 	beq	r4,zero,10b5c <__mulsi3+0x2c>
   10b34:	0007883a 	mov	r3,zero
   10b38:	2080004c 	andi	r2,r4,1
   10b3c:	1005003a 	cmpeq	r2,r2,zero
   10b40:	2008d07a 	srli	r4,r4,1
   10b44:	1000011e 	bne	r2,zero,10b4c <__mulsi3+0x1c>
   10b48:	1947883a 	add	r3,r3,r5
   10b4c:	294b883a 	add	r5,r5,r5
   10b50:	203ff91e 	bne	r4,zero,10b38 <__mulsi3+0x8>
   10b54:	1805883a 	mov	r2,r3
   10b58:	f800283a 	ret
   10b5c:	0007883a 	mov	r3,zero
   10b60:	1805883a 	mov	r2,r3
   10b64:	f800283a 	ret

00010b68 <_atoi_r>:
   10b68:	000d883a 	mov	r6,zero
   10b6c:	01c00284 	movi	r7,10
   10b70:	0010bc41 	jmpi	10bc4 <_strtol_r>

00010b74 <atoi>:
   10b74:	000b883a 	mov	r5,zero
   10b78:	01800284 	movi	r6,10
   10b7c:	0010e141 	jmpi	10e14 <strtol>

00010b80 <strchr>:
   10b80:	20800003 	ldbu	r2,0(r4)
   10b84:	10000c26 	beq	r2,zero,10bb8 <strchr+0x38>
   10b88:	29403fcc 	andi	r5,r5,255
   10b8c:	28800626 	beq	r5,r2,10ba8 <strchr+0x28>
   10b90:	21000044 	addi	r4,r4,1
   10b94:	20800003 	ldbu	r2,0(r4)
   10b98:	103ffc1e 	bne	r2,zero,10b8c <strchr+0xc>
   10b9c:	28000426 	beq	r5,zero,10bb0 <strchr+0x30>
   10ba0:	0005883a 	mov	r2,zero
   10ba4:	f800283a 	ret
   10ba8:	2005883a 	mov	r2,r4
   10bac:	f800283a 	ret
   10bb0:	2005883a 	mov	r2,r4
   10bb4:	f800283a 	ret
   10bb8:	29403fcc 	andi	r5,r5,255
   10bbc:	283ff81e 	bne	r5,zero,10ba0 <strchr+0x20>
   10bc0:	003ffb06 	br	10bb0 <strchr+0x30>

00010bc4 <_strtol_r>:
   10bc4:	defff304 	addi	sp,sp,-52
   10bc8:	00800074 	movhi	r2,1
   10bcc:	10860c04 	addi	r2,r2,6192
   10bd0:	dd000715 	stw	r20,28(sp)
   10bd4:	15000017 	ldw	r20,0(r2)
   10bd8:	ddc00a15 	stw	r23,40(sp)
   10bdc:	dc800515 	stw	r18,20(sp)
   10be0:	dc400415 	stw	r17,16(sp)
   10be4:	dfc00c15 	stw	ra,48(sp)
   10be8:	df000b15 	stw	fp,44(sp)
   10bec:	dd800915 	stw	r22,36(sp)
   10bf0:	dd400815 	stw	r21,32(sp)
   10bf4:	dcc00615 	stw	r19,24(sp)
   10bf8:	dc000315 	stw	r16,12(sp)
   10bfc:	282f883a 	mov	r23,r5
   10c00:	d9000115 	stw	r4,4(sp)
   10c04:	d9800215 	stw	r6,8(sp)
   10c08:	3825883a 	mov	r18,r7
   10c0c:	2823883a 	mov	r17,r5
   10c10:	8c000007 	ldb	r16,0(r17)
   10c14:	8c400044 	addi	r17,r17,1
   10c18:	a407883a 	add	r3,r20,r16
   10c1c:	18800003 	ldbu	r2,0(r3)
   10c20:	1080020c 	andi	r2,r2,8
   10c24:	103ffa1e 	bne	r2,zero,10c10 <_strtol_r+0x4c>
   10c28:	00800b44 	movi	r2,45
   10c2c:	80805c26 	beq	r16,r2,10da0 <_strtol_r+0x1dc>
   10c30:	00800ac4 	movi	r2,43
   10c34:	80805726 	beq	r16,r2,10d94 <_strtol_r+0x1d0>
   10c38:	d8000015 	stw	zero,0(sp)
   10c3c:	9007003a 	cmpeq	r3,r18,zero
   10c40:	1800431e 	bne	r3,zero,10d50 <_strtol_r+0x18c>
   10c44:	00800404 	movi	r2,16
   10c48:	90804126 	beq	r18,r2,10d50 <_strtol_r+0x18c>
   10c4c:	902b883a 	mov	r21,r18
   10c50:	d8c00017 	ldw	r3,0(sp)
   10c54:	1838c03a 	cmpne	fp,r3,zero
   10c58:	e0004a1e 	bne	fp,zero,10d84 <_strtol_r+0x1c0>
   10c5c:	04e00034 	movhi	r19,32768
   10c60:	9cffffc4 	addi	r19,r19,-1
   10c64:	9809883a 	mov	r4,r19
   10c68:	a80b883a 	mov	r5,r21
   10c6c:	0010b280 	call	10b28 <__umodsi3>
   10c70:	9809883a 	mov	r4,r19
   10c74:	a80b883a 	mov	r5,r21
   10c78:	102d883a 	mov	r22,r2
   10c7c:	0010b200 	call	10b20 <__udivsi3>
   10c80:	1027883a 	mov	r19,r2
   10c84:	a405883a 	add	r2,r20,r16
   10c88:	11400003 	ldbu	r5,0(r2)
   10c8c:	0009883a 	mov	r4,zero
   10c90:	000d883a 	mov	r6,zero
   10c94:	28c0010c 	andi	r3,r5,4
   10c98:	18000f26 	beq	r3,zero,10cd8 <_strtol_r+0x114>
   10c9c:	843ff404 	addi	r16,r16,-48
   10ca0:	8480150e 	bge	r16,r18,10cf8 <_strtol_r+0x134>
   10ca4:	30003216 	blt	r6,zero,10d70 <_strtol_r+0x1ac>
   10ca8:	99003136 	bltu	r19,r4,10d70 <_strtol_r+0x1ac>
   10cac:	24c02f26 	beq	r4,r19,10d6c <_strtol_r+0x1a8>
   10cb0:	a80b883a 	mov	r5,r21
   10cb4:	0010b300 	call	10b30 <__mulsi3>
   10cb8:	1409883a 	add	r4,r2,r16
   10cbc:	01800044 	movi	r6,1
   10cc0:	8c000007 	ldb	r16,0(r17)
   10cc4:	8c400044 	addi	r17,r17,1
   10cc8:	a405883a 	add	r2,r20,r16
   10ccc:	11400003 	ldbu	r5,0(r2)
   10cd0:	28c0010c 	andi	r3,r5,4
   10cd4:	183ff11e 	bne	r3,zero,10c9c <_strtol_r+0xd8>
   10cd8:	288000cc 	andi	r2,r5,3
   10cdc:	10000626 	beq	r2,zero,10cf8 <_strtol_r+0x134>
   10ce0:	2880004c 	andi	r2,r5,1
   10ce4:	1005003a 	cmpeq	r2,r2,zero
   10ce8:	1000231e 	bne	r2,zero,10d78 <_strtol_r+0x1b4>
   10cec:	00800dc4 	movi	r2,55
   10cf0:	80a1c83a 	sub	r16,r16,r2
   10cf4:	84bfeb16 	blt	r16,r18,10ca4 <_strtol_r+0xe0>
   10cf8:	30002e16 	blt	r6,zero,10db4 <_strtol_r+0x1f0>
   10cfc:	e000231e 	bne	fp,zero,10d8c <_strtol_r+0x1c8>
   10d00:	2007883a 	mov	r3,r4
   10d04:	d8800217 	ldw	r2,8(sp)
   10d08:	10000426 	beq	r2,zero,10d1c <_strtol_r+0x158>
   10d0c:	30000126 	beq	r6,zero,10d14 <_strtol_r+0x150>
   10d10:	8dffffc4 	addi	r23,r17,-1
   10d14:	d9000217 	ldw	r4,8(sp)
   10d18:	25c00015 	stw	r23,0(r4)
   10d1c:	1805883a 	mov	r2,r3
   10d20:	dfc00c17 	ldw	ra,48(sp)
   10d24:	df000b17 	ldw	fp,44(sp)
   10d28:	ddc00a17 	ldw	r23,40(sp)
   10d2c:	dd800917 	ldw	r22,36(sp)
   10d30:	dd400817 	ldw	r21,32(sp)
   10d34:	dd000717 	ldw	r20,28(sp)
   10d38:	dcc00617 	ldw	r19,24(sp)
   10d3c:	dc800517 	ldw	r18,20(sp)
   10d40:	dc400417 	ldw	r17,16(sp)
   10d44:	dc000317 	ldw	r16,12(sp)
   10d48:	dec00d04 	addi	sp,sp,52
   10d4c:	f800283a 	ret
   10d50:	00800c04 	movi	r2,48
   10d54:	80801f26 	beq	r16,r2,10dd4 <_strtol_r+0x210>
   10d58:	183fbc26 	beq	r3,zero,10c4c <_strtol_r+0x88>
   10d5c:	00800c04 	movi	r2,48
   10d60:	80802926 	beq	r16,r2,10e08 <_strtol_r+0x244>
   10d64:	04800284 	movi	r18,10
   10d68:	003fb806 	br	10c4c <_strtol_r+0x88>
   10d6c:	b43fd00e 	bge	r22,r16,10cb0 <_strtol_r+0xec>
   10d70:	01bfffc4 	movi	r6,-1
   10d74:	003fd206 	br	10cc0 <_strtol_r+0xfc>
   10d78:	008015c4 	movi	r2,87
   10d7c:	80a1c83a 	sub	r16,r16,r2
   10d80:	003fdc06 	br	10cf4 <_strtol_r+0x130>
   10d84:	04e00034 	movhi	r19,32768
   10d88:	003fb606 	br	10c64 <_strtol_r+0xa0>
   10d8c:	0107c83a 	sub	r3,zero,r4
   10d90:	003fdc06 	br	10d04 <_strtol_r+0x140>
   10d94:	8c000007 	ldb	r16,0(r17)
   10d98:	8c400044 	addi	r17,r17,1
   10d9c:	003fa606 	br	10c38 <_strtol_r+0x74>
   10da0:	8c000007 	ldb	r16,0(r17)
   10da4:	00800044 	movi	r2,1
   10da8:	8c400044 	addi	r17,r17,1
   10dac:	d8800015 	stw	r2,0(sp)
   10db0:	003fa206 	br	10c3c <_strtol_r+0x78>
   10db4:	d9000017 	ldw	r4,0(sp)
   10db8:	2005003a 	cmpeq	r2,r4,zero
   10dbc:	10000f1e 	bne	r2,zero,10dfc <_strtol_r+0x238>
   10dc0:	00e00034 	movhi	r3,32768
   10dc4:	d9000117 	ldw	r4,4(sp)
   10dc8:	00800884 	movi	r2,34
   10dcc:	20800015 	stw	r2,0(r4)
   10dd0:	003fcc06 	br	10d04 <_strtol_r+0x140>
   10dd4:	89000007 	ldb	r4,0(r17)
   10dd8:	00801e04 	movi	r2,120
   10ddc:	20800226 	beq	r4,r2,10de8 <_strtol_r+0x224>
   10de0:	00801604 	movi	r2,88
   10de4:	20bfdc1e 	bne	r4,r2,10d58 <_strtol_r+0x194>
   10de8:	8c000047 	ldb	r16,1(r17)
   10dec:	04800404 	movi	r18,16
   10df0:	8c400084 	addi	r17,r17,2
   10df4:	902b883a 	mov	r21,r18
   10df8:	003f9506 	br	10c50 <_strtol_r+0x8c>
   10dfc:	00e00034 	movhi	r3,32768
   10e00:	18ffffc4 	addi	r3,r3,-1
   10e04:	003fef06 	br	10dc4 <_strtol_r+0x200>
   10e08:	04800204 	movi	r18,8
   10e0c:	902b883a 	mov	r21,r18
   10e10:	003f8f06 	br	10c50 <_strtol_r+0x8c>

00010e14 <strtol>:
   10e14:	00800074 	movhi	r2,1
   10e18:	10860d04 	addi	r2,r2,6196
   10e1c:	2013883a 	mov	r9,r4
   10e20:	11000017 	ldw	r4,0(r2)
   10e24:	2805883a 	mov	r2,r5
   10e28:	300f883a 	mov	r7,r6
   10e2c:	480b883a 	mov	r5,r9
   10e30:	100d883a 	mov	r6,r2
   10e34:	0010bc41 	jmpi	10bc4 <_strtol_r>

00010e38 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10e38:	000530fa 	rdctl	r2,ienable
   10e3c:	00c00044 	movi	r3,1
   10e40:	1946983a 	sll	r3,r3,r5
   10e44:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   10e48:	1004c03a 	cmpne	r2,r2,zero
   10e4c:	f800283a 	ret

00010e50 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e50:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e54:	00bfff84 	movi	r2,-2
   10e58:	3084703a 	and	r2,r6,r2
   10e5c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10e60:	01000074 	movhi	r4,1
   10e64:	21065904 	addi	r4,r4,6500
   10e68:	00c00044 	movi	r3,1
   10e6c:	20800017 	ldw	r2,0(r4)
   10e70:	1946983a 	sll	r3,r3,r5
   10e74:	10c4b03a 	or	r2,r2,r3
   10e78:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e7c:	20800017 	ldw	r2,0(r4)
   10e80:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e84:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10e88:	0005883a 	mov	r2,zero
   10e8c:	f800283a 	ret

00010e90 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e90:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e94:	00bfff84 	movi	r2,-2
   10e98:	3084703a 	and	r2,r6,r2
   10e9c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10ea0:	01000074 	movhi	r4,1
   10ea4:	21065904 	addi	r4,r4,6500
   10ea8:	00ffff84 	movi	r3,-2
   10eac:	20800017 	ldw	r2,0(r4)
   10eb0:	1946183a 	rol	r3,r3,r5
   10eb4:	10c4703a 	and	r2,r2,r3
   10eb8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ebc:	20800017 	ldw	r2,0(r4)
   10ec0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ec4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10ec8:	0005883a 	mov	r2,zero
   10ecc:	f800283a 	ret

00010ed0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10ed0:	0010ed41 	jmpi	10ed4 <alt_iic_isr_register>

00010ed4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ed4:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ed8:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10edc:	dfc00115 	stw	ra,4(sp)
   10ee0:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ee4:	00fffa84 	movi	r3,-22
   10ee8:	11401016 	blt	r2,r5,10f2c <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10eec:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ef0:	00bfff84 	movi	r2,-2
   10ef4:	8084703a 	and	r2,r16,r2
   10ef8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10efc:	280490fa 	slli	r2,r5,3
   10f00:	00c00074 	movhi	r3,1
   10f04:	18c6cb04 	addi	r3,r3,6956
   10f08:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
   10f0c:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10f10:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10f14:	30000226 	beq	r6,zero,10f20 <alt_iic_isr_register+0x4c>
   10f18:	0010e500 	call	10e50 <alt_ic_irq_enable>
   10f1c:	00000106 	br	10f24 <alt_iic_isr_register+0x50>
   10f20:	0010e900 	call	10e90 <alt_ic_irq_disable>
   10f24:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f28:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10f2c:	1805883a 	mov	r2,r3
   10f30:	dfc00117 	ldw	ra,4(sp)
   10f34:	dc000017 	ldw	r16,0(sp)
   10f38:	dec00204 	addi	sp,sp,8
   10f3c:	f800283a 	ret

00010f40 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10f40:	2900051e 	bne	r5,r4,10f58 <alt_load_section+0x18>
   10f44:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   10f48:	20800017 	ldw	r2,0(r4)
   10f4c:	21000104 	addi	r4,r4,4
   10f50:	28800015 	stw	r2,0(r5)
   10f54:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10f58:	29bffb1e 	bne	r5,r6,10f48 <alt_load_section+0x8>
   10f5c:	f800283a 	ret

00010f60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10f60:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10f64:	01000074 	movhi	r4,1
   10f68:	21061504 	addi	r4,r4,6228
   10f6c:	01400074 	movhi	r5,1
   10f70:	2945d404 	addi	r5,r5,5968
   10f74:	01800074 	movhi	r6,1
   10f78:	31861504 	addi	r6,r6,6228
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10f7c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10f80:	0010f400 	call	10f40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10f84:	01000074 	movhi	r4,1
   10f88:	21000804 	addi	r4,r4,32
   10f8c:	01400074 	movhi	r5,1
   10f90:	29400804 	addi	r5,r5,32
   10f94:	01800074 	movhi	r6,1
   10f98:	31805004 	addi	r6,r6,320
   10f9c:	0010f400 	call	10f40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10fa0:	01000074 	movhi	r4,1
   10fa4:	2104f504 	addi	r4,r4,5076
   10fa8:	01400074 	movhi	r5,1
   10fac:	2944f504 	addi	r5,r5,5076
   10fb0:	01800074 	movhi	r6,1
   10fb4:	3185d404 	addi	r6,r6,5968
   10fb8:	0010f400 	call	10f40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10fbc:	00113c40 	call	113c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10fc0:	dfc00017 	ldw	ra,0(sp)
   10fc4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10fc8:	00113c81 	jmpi	113c8 <alt_icache_flush_all>

00010fcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10fcc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10fd0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10fd4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10fd8:	00112840 	call	11284 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10fdc:	001126c0 	call	1126c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10fe0:	d1204e17 	ldw	r4,-32456(gp)
   10fe4:	d1604f17 	ldw	r5,-32452(gp)
   10fe8:	d1a05017 	ldw	r6,-32448(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10fec:	dfc00017 	ldw	ra,0(sp)
   10ff0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10ff4:	00101dc1 	jmpi	101dc <main>

00010ff8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   10ff8:	defff804 	addi	sp,sp,-32
   10ffc:	dfc00415 	stw	ra,16(sp)
   11000:	dc800315 	stw	r18,12(sp)
   11004:	dc400215 	stw	r17,8(sp)
   11008:	dc000115 	stw	r16,4(sp)
   1100c:	d9400515 	stw	r5,20(sp)
   11010:	d9800615 	stw	r6,24(sp)
   11014:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
   11018:	d8800504 	addi	r2,sp,20
   1101c:	2025883a 	mov	r18,r4
   11020:	d8800015 	stw	r2,0(sp)
   11024:	00003d06 	br	1111c <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11028:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1102c:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11030:	18800226 	beq	r3,r2,1103c <alt_printf+0x44>
        {
            alt_putchar(c);
   11034:	1809883a 	mov	r4,r3
   11038:	00000a06 	br	11064 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1103c:	91000007 	ldb	r4,0(r18)
   11040:	94800044 	addi	r18,r18,1
   11044:	20003726 	beq	r4,zero,11124 <alt_printf+0x12c>
            {
                if (c == '%')
   11048:	20c00626 	beq	r4,r3,11064 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   1104c:	008018c4 	movi	r2,99
   11050:	2080061e 	bne	r4,r2,1106c <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
   11054:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
   11058:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1105c:	10800104 	addi	r2,r2,4
   11060:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
   11064:	001113c0 	call	1113c <alt_putchar>
   11068:	00002c06 	br	1111c <alt_printf+0x124>
                }
                else if (c == 'x')
   1106c:	00801e04 	movi	r2,120
   11070:	20801e1e 	bne	r4,r2,110ec <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   11074:	d8800017 	ldw	r2,0(sp)
   11078:	14400017 	ldw	r17,0(r2)
   1107c:	10800104 	addi	r2,r2,4
   11080:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11084:	88000226 	beq	r17,zero,11090 <alt_printf+0x98>
   11088:	04000704 	movi	r16,28
   1108c:	00000306 	br	1109c <alt_printf+0xa4>
                    {
                        alt_putchar('0');
   11090:	01000c04 	movi	r4,48
   11094:	003ff306 	br	11064 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
   11098:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1109c:	008003c4 	movi	r2,15
   110a0:	1404983a 	sll	r2,r2,r16
   110a4:	8884703a 	and	r2,r17,r2
   110a8:	103ffb26 	beq	r2,zero,11098 <alt_printf+0xa0>
   110ac:	00000b06 	br	110dc <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   110b0:	8884703a 	and	r2,r17,r2
   110b4:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
   110b8:	00800244 	movi	r2,9
                            c = '0' + digit;
   110bc:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
   110c0:	10c0012e 	bgeu	r2,r3,110c8 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
   110c4:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
   110c8:	21003fcc 	andi	r4,r4,255
   110cc:	2100201c 	xori	r4,r4,128
   110d0:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   110d4:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
   110d8:	001113c0 	call	1113c <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   110dc:	008003c4 	movi	r2,15
   110e0:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   110e4:	803ff20e 	bge	r16,zero,110b0 <alt_printf+0xb8>
   110e8:	00000c06 	br	1111c <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   110ec:	00801cc4 	movi	r2,115
   110f0:	20800a1e 	bne	r4,r2,1111c <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   110f4:	d8800017 	ldw	r2,0(sp)
   110f8:	14000017 	ldw	r16,0(r2)
   110fc:	10800104 	addi	r2,r2,4
   11100:	d8800015 	stw	r2,0(sp)
   11104:	00000106 	br	1110c <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
   11108:	001113c0 	call	1113c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   1110c:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
   11110:	84000044 	addi	r16,r16,1
   11114:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   11118:	103ffb1e 	bne	r2,zero,11108 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1111c:	90c00007 	ldb	r3,0(r18)
   11120:	183fc11e 	bne	r3,zero,11028 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
   11124:	dfc00417 	ldw	ra,16(sp)
   11128:	dc800317 	ldw	r18,12(sp)
   1112c:	dc400217 	ldw	r17,8(sp)
   11130:	dc000117 	ldw	r16,4(sp)
   11134:	dec00804 	addi	sp,sp,32
   11138:	f800283a 	ret

0001113c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1113c:	defffd04 	addi	sp,sp,-12
   11140:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11144:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11148:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1114c:	01800044 	movi	r6,1
   11150:	01000074 	movhi	r4,1
   11154:	21061304 	addi	r4,r4,6220
   11158:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1115c:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   11160:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11164:	00113300 	call	11330 <altera_avalon_uart_write>
   11168:	1009883a 	mov	r4,r2
   1116c:	00bfffc4 	movi	r2,-1
   11170:	2080011e 	bne	r4,r2,11178 <alt_putchar+0x3c>
   11174:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
   11178:	8005883a 	mov	r2,r16
   1117c:	dfc00217 	ldw	ra,8(sp)
   11180:	dc000117 	ldw	r16,4(sp)
   11184:	dec00304 	addi	sp,sp,12
   11188:	f800283a 	ret

0001118c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1118c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11190:	00bfff84 	movi	r2,-2
   11194:	2884703a 	and	r2,r5,r2
   11198:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1119c:	20c00017 	ldw	r3,0(r4)
   111a0:	20800117 	ldw	r2,4(r4)
   111a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   111a8:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   111ac:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
   111b0:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
   111b4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111b8:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   111bc:	f800283a 	ret

000111c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   111c0:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   111c4:	d0a05217 	ldw	r2,-32440(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   111c8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   111cc:	d4200417 	ldw	r16,-32752(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   111d0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   111d4:	dfc00215 	stw	ra,8(sp)
   111d8:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   111dc:	d0a05215 	stw	r2,-32440(gp)
   111e0:	00001b06 	br	11250 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   111e4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   111e8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   111ec:	10000326 	beq	r2,zero,111fc <alt_tick+0x3c>
   111f0:	d0a05217 	ldw	r2,-32440(gp)
   111f4:	1000011e 	bne	r2,zero,111fc <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   111f8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   111fc:	d0e05217 	ldw	r3,-32440(gp)
   11200:	80800217 	ldw	r2,8(r16)
   11204:	18801136 	bltu	r3,r2,1124c <alt_tick+0x8c>
   11208:	80800403 	ldbu	r2,16(r16)
   1120c:	10000f1e 	bne	r2,zero,1124c <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   11210:	81000517 	ldw	r4,20(r16)
   11214:	80800317 	ldw	r2,12(r16)
   11218:	103ee83a 	callr	r2
   1121c:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11220:	1000031e 	bne	r2,zero,11230 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   11224:	8009883a 	mov	r4,r16
   11228:	001118c0 	call	1118c <alt_alarm_stop>
   1122c:	00000706 	br	1124c <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   11230:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11234:	d0e05217 	ldw	r3,-32440(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   11238:	1105883a 	add	r2,r2,r4
   1123c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11240:	10c0022e 	bgeu	r2,r3,1124c <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   11244:	00800044 	movi	r2,1
   11248:	80800405 	stb	r2,16(r16)
   1124c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11250:	d0a00404 	addi	r2,gp,-32752
   11254:	80bfe31e 	bne	r16,r2,111e4 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11258:	dfc00217 	ldw	ra,8(sp)
   1125c:	dc400117 	ldw	r17,4(sp)
   11260:	dc000017 	ldw	r16,0(sp)
   11264:	dec00304 	addi	sp,sp,12
   11268:	f800283a 	ret

0001126c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1126c:	010000b4 	movhi	r4,2
   11270:	21040004 	addi	r4,r4,4096
   11274:	000b883a 	mov	r5,zero
   11278:	01800084 	movi	r6,2
   1127c:	01c0fa04 	movi	r7,1000
   11280:	00112a41 	jmpi	112a4 <alt_avalon_timer_sc_init>

00011284 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11284:	deffff04 	addi	sp,sp,-4
   11288:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   1128c:	00113cc0 	call	113cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11290:	00800044 	movi	r2,1
   11294:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11298:	dfc00017 	ldw	ra,0(sp)
   1129c:	dec00104 	addi	sp,sp,4
   112a0:	f800283a 	ret

000112a4 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   112a4:	02000074 	movhi	r8,1
   112a8:	42065d04 	addi	r8,r8,6516
   112ac:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   112b0:	defffe04 	addi	sp,sp,-8
   112b4:	3807883a 	mov	r3,r7
   112b8:	dfc00115 	stw	ra,4(sp)
   112bc:	200f883a 	mov	r7,r4
   112c0:	1000011e 	bne	r2,zero,112c8 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
   112c4:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   112c8:	008001c4 	movi	r2,7
   112cc:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   112d0:	2809883a 	mov	r4,r5
   112d4:	300b883a 	mov	r5,r6
   112d8:	01800074 	movhi	r6,1
   112dc:	3184bd04 	addi	r6,r6,4852
   112e0:	d8000015 	stw	zero,0(sp)
   112e4:	0010ed00 	call	10ed0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   112e8:	dfc00117 	ldw	ra,4(sp)
   112ec:	dec00204 	addi	sp,sp,8
   112f0:	f800283a 	ret

000112f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   112f4:	defffe04 	addi	sp,sp,-8
   112f8:	dfc00115 	stw	ra,4(sp)
   112fc:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11300:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11304:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11308:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1130c:	00bfff84 	movi	r2,-2
   11310:	8084703a 	and	r2,r16,r2
   11314:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   11318:	00111c00 	call	111c0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1131c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   11320:	dfc00117 	ldw	ra,4(sp)
   11324:	dc000017 	ldw	r16,0(sp)
   11328:	dec00204 	addi	sp,sp,8
   1132c:	f800283a 	ret

00011330 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   11330:	defffd04 	addi	sp,sp,-12
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   11334:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   11338:	dc400115 	stw	r17,4(sp)
   1133c:	dc000015 	stw	r16,0(sp)
   11340:	dfc00215 	stw	ra,8(sp)
   11344:	3023883a 	mov	r17,r6
   11348:	380ec03a 	cmpne	r7,r7,zero
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   1134c:	3021883a 	mov	r16,r6
  count = len;

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   11350:	20c00017 	ldw	r3,0(r4)
   11354:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   11358:	1080100c 	andi	r2,r2,64
   1135c:	10000426 	beq	r2,zero,11370 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   11360:	28800007 	ldb	r2,0(r5)
   11364:	29400044 	addi	r5,r5,1
   11368:	18800135 	stwio	r2,4(r3)
      count--;
   1136c:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
   11370:	3800021e 	bne	r7,zero,1137c <altera_avalon_uart_write+0x4c>
   11374:	80000d26 	beq	r16,zero,113ac <altera_avalon_uart_write+0x7c>
   11378:	003ff506 	br	11350 <altera_avalon_uart_write+0x20>

  if (count)
   1137c:	80000b26 	beq	r16,zero,113ac <altera_avalon_uart_write+0x7c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11380:	00800074 	movhi	r2,1
   11384:	10861404 	addi	r2,r2,6224
   11388:	10800017 	ldw	r2,0(r2)
   1138c:	1000031e 	bne	r2,zero,1139c <altera_avalon_uart_write+0x6c>
   11390:	00c00074 	movhi	r3,1
   11394:	18c65f04 	addi	r3,r3,6524
   11398:	00000206 	br	113a4 <altera_avalon_uart_write+0x74>
   1139c:	103ee83a 	callr	r2
   113a0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EWOULDBLOCK;
   113a4:	008002c4 	movi	r2,11
   113a8:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
}
   113ac:	8c05c83a 	sub	r2,r17,r16
   113b0:	dfc00217 	ldw	ra,8(sp)
   113b4:	dc400117 	ldw	r17,4(sp)
   113b8:	dc000017 	ldw	r16,0(sp)
   113bc:	dec00304 	addi	sp,sp,12
   113c0:	f800283a 	ret

000113c4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   113c4:	f800283a 	ret

000113c8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   113c8:	f800283a 	ret

000113cc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   113cc:	000170fa 	wrctl	ienable,zero
}
   113d0:	f800283a 	ret
